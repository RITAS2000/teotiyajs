// ==============================================================================
// ? at()
// - –ø–æ–≤–µ—Ä—Ç–∞—î –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º;
// - –ø—Ä–∏–π–º–∞—î –≤—ñ–¥'—î–º–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è;
// - –ø–æ–≤–µ—Ä—Ç–∞—î indefined, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ —Ç–∞–∫–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º –≤—ñ–¥—Å—É—Ç–Ω—î.

const stores = ["–†—É–∫–∞–≤–∏—á–∫–∞", "–ë–ª–∏–∑–µ–Ω—å–∫–æ", "–ê–¢–ë", "–§–æ–∫—Å—Ç—Ä–æ—Ç", "–ú–æ–±—ñ–ú–∞–Ω—ñ—è"];
// console.log('üöÄ ~ stores:', stores);

const store1 = stores.at(1);
// console.log('üöÄ ~ store1:', store1);
// console.log(stores[1]); // —Ç–∞–∫–æ–∂ —à—É–∫–∞—î –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º

const store2 = stores.at(-1); // –¥–ª—è –ø–æ—à—É–∫—É –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É
// console.log('üöÄ ~ store2:', store2);
// console.log(stores[-1]); // !–Ω–µ –ø–∏–π–º–∞—î –≤—ñ–¥—î–º–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–∏—Ç–∞—î undefined.

// console.log(stores.at(-1) === stores[stores.length - 1]); // TODO –º–æ–∂–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —â–æ–± —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Å.

// ==============================================================================
// ? concat()
// - –æ–±'—î–¥–Ω—É—î –¥–≤–∞ –∞–±–æ –±–∏–ª—å—à–µ –º–∞—Å–∏–≤—ñ–≤;
// - –Ω–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤;
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤;

const array1 = [1, 2, 3];
// console.log('üöÄ ~ array1:', array1);

const array2 = [4, 5, 6];
// console.log('üöÄ ~ array2:', array2);

const newArray1 = array1.concat(array2);
// console.log('üöÄ ~ newArray1:', newArray1);

const array3 = [7, 8, 9];
// console.log('üöÄ ~ array3:', array3);

const newArray2 = array1.concat(array2, array3); // —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Å–∏–≤—ñ–≤;
// console.log('üöÄ ~ newArray2:', newArray2);

// ==============================================================================
// ? Array()  //constructor
// - —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤;
const array4 = Array(1, 2, 3, "—Ü—É–∫–æ—Ä", true);
// console.log("üöÄ ~ array:", array4); // [1, 2, 3, '—Ü—É–∫–æ—Ä', true]

const str1 = "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?";
const str2 = "–î–æ–±—Ä–µ!";
const array5 = Array(str1, str2);
// console.log("üöÄ ~ array5:", array5); // ['–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?', '–î–æ–±—Ä–µ!']

// ==============================================================================
// ? Array.from()  //constructor
// - —Å—Ç–≤–æ—Ä—é—î –º–∞—Å—Å–∏–≤ (–∑ —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
// TODO –Ü—Ç–µ—Ä–∞–±–µ–ª—å–Ω—ñ –æ–±'—î–∫—Ç–∏ ‚Äî —Ü–µ –æ–±'—î–∫—Ç–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ (—ñ—Ç–µ—Ä–∞—Ü—ñ—é) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é for...of –∞–±–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—Ç–∏ ...spread.

const str3 = "–°—É–ø–µ—Ä!";
const array6 = Array.from(str3);
// console.log("üöÄ ~ array6:", array6); // ['–°', '—É', '–ø', '–µ', '—Ä', '!']
const sentence1 = "–°—å–æ–≥–æ–¥–Ω—ñ –≥–∞—Ä–Ω–∞ –ø–æ–≥–æ–¥–∞";
const array7 = Array.from(sentence1);
// console.log("üöÄ ~ array7:", array7); // ['–°', '—å', '–æ', '–≥', '–æ', '–¥', '–Ω', '—ñ', ' ', '–≥', '–∞', '—Ä', '–Ω', '–∞', ' ', '–ø', '–æ', '–≥', '–æ', '–¥', '–∞']

const num1 = 7689;
// console.log("üöÄ ~ num1:", typeof num1); // number
const array8 = Array.from(num1);
// console.log("üöÄ ~ array8:", array8); // –ø–æ–≤–µ—Ä—Ç–∞—î –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤ (–ß–∏—Å–ª–∞ –Ω–µ –º–∞—é—Ç—å –º–µ—Ç–æ–¥—É Symbol.iterator)
const array9 = Array.from(String(num1), Number); // —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —É —Ä—è–¥–∫–∏ –∞ —Ä—è–¥–∫–∏ –≤ —á–∏—Å–ª–∞ (–¥—Ä—É–≥–∏–π –∞–≥—Ä—É–º–µ–Ω—Ç –∫–∞–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è Number())
// console.log(array9); //[7, 6, 8, 9]

function example() {
  const array10 = Array.from(arguments); //  –º–∞—Å–∏–≤–æ–ø–æ–¥—ñ–±–Ω—ñ –æ–±'—î–∫—Ç–∏ (arguments)
  //   console.log(array10);
}
example(1, 2, 3); // [1, 2, 3]
example("–æ–¥–∏–Ω", "–¥–≤–∞"); // ["–æ–¥–∏–Ω", "–¥–≤–∞"];
// const num = 98765;
// const array10 = Array.from(String(num)).map(Number);

// console.log(array10); // –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ map()

const paragraphs = document.querySelectorAll("p");
const array11 = Array.from(paragraphs).map(p => p.textContent);
// console.log(array11); // ['–ü—Ä–∏–≤—ñ—Ç!', '–Ø–∫ —Å–ø—Ä–∞–≤–∏?', '–î–æ–±—Ä–µ!']

// const paragraphs = document.querySelectorAll("p");
// const array11 = Array.from(paragraphs, p => p.textContent);// —Å–∫–æ—Ä–æ—á–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º

// console.log(array11);

//!
// const mySet = new Set([1, 2, 3, 3, 4]);
// const arrayFromSet = Array.from(mySet);
// console.log(arrayFromSet); // [1, 2, 3, 4] (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–∏–±—Ä–∞–Ω—ñ)
//!
// const myMap = new Map([
//   ["a", 1],
//   ["b", 2],
// ]);
// const keys = Array.from(myMap.keys());
// console.log(keys); // ['a', 'b']
//!
// const numbers = Array.from([1, 2, 3], x => x * 2);
// console.log(numbers);// [2, 4, 6]
// ! —Ç–∞–∫ —Ç–µ–∂ –º–æ–∂–Ω–æ –∞–ª–µ —Ü–µ –∑–∞–π–≤–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ split(" ") –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º
//  const sentence = "This is a simple sentence";
// const wordsArray = Array.from(sentence.split(" "));
// console.log(wordsArray);
// TODO —Å–ø–æ—Å—ñ–± —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –æ–±—î–∫—Ç –∏—Ç–µ—Ä–∞–±—ñ–ª—å–Ω–∏–º
// const person = {
//   name: "Alice",
//   age: 25,
//   city: "New York",

//   [Symbol.iterator]() {
//     const entries = Object.entries(this);
//     let index = 0;

//     return {
//       next() {
//         if (index < entries.length) {
//           return { value: entries[index++], done: false };
//         } else {
//           return { done: true };
//         }
//       },
//     };
//   },
// };

// for (const [key, value] of person) {
//   console.log(key, value); // name Alice // age 25 // city New York
// }

// ==============================================================================
// ? Array.fromAsync() //constructor
// -  –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
// TODO –ì–Ω—É—á–∫—ñ—Å—Ç—å: –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∞–±–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤, —â–æ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–∏—Ö, –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑ –º–µ—Ä–µ–∂—ñ –∞–±–æ –∑ —ñ–Ω—à–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.
//!
// const asyncIterable = {
//   async *[Symbol.asyncIterator]() {
//     yield 1;
//     yield 2;
//     yield 3;
//   }
// };
// Array.fromAsync(asyncIterable).then(arr => console.log(arr));  // [1, 2, 3]
//!
// async function* asyncGenerator() {
//   yield "apple";
//   yield "banana";
//   yield "cherry";
// }

// (async () => {
//   const fruits = await Array.fromAsync(asyncGenerator());
//   console.log(fruits); // ["apple", "banana", "cherry"]
// })();
//!
// async function fetchData(url) {
//   const response = await fetch(url);
//   return await response.json();
// }

// (async () => {
//   const urls = [
//     "https://jsonplaceholder.typicode.com/posts/1",
//     "https://jsonplaceholder.typicode.com/posts/2",
//   ];

//   const posts = await Array.fromAsync(urls, async url => {
//     const post = await fetchData(url);
//     return post.title; // –í–∏–±—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∑ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç—É
//   });

//   console.log(posts); // ["Title 1", "Title 2"]
// })();

// ==============================================================================
// ? Array.isArray() //constructor
// - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–µ—Ä–µ–¥–∞–Ω–∏–π –æ–±'—î–∫—Ç –º–∞—Å–∏–≤–æ–º.
// - –ø–æ–≤–µ—Ä—Ç–∞—î true –∞–±–æ false

// console.log(Array.isArray(array4)); // true
// console.log(Array.isArray(sentence1)); // false

// ==============================================================================
// ? Array.of() //constructor
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;
const array12 = Array.of(1, 2, 3);
// console.log("üöÄ ~ array12:", array12); // [1, 2, 3]

// ==============================================================================
// ? copyWithin()
// - –æ–∑–≤–æ–ª—è—î –∫–æ–ø—ñ—é–≤–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–∞—Å–∏–≤—É –≤ —ñ–Ω—à—É —á–∞—Å—Ç–∏–Ω—É —Ü—å–æ–≥–æ –∂ –º–∞—Å–∏–≤—É;
// - –Ω–µ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å—Å–∏–≤, –∑–¥–∏–π—Å–Ω—é—î –ø–µ—Ä–Ω–µ—Å–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º–∞—Å—Å–∏–≤—ñ;
// TODO - array.copyWithin(target, start, end)
// target ‚Äì —ñ–Ω–¥–µ–∫—Å, –≤ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏. –Ø–∫—â–æ target —î –≤—ñ–¥'—î–º–Ω–∏–º, –≤—ñ–Ω –≤–∫–∞–∑—É—î –Ω–∞ —ñ–Ω–¥–µ–∫—Å –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// start (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π) ‚Äì —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞, –∑ —è–∫–æ–≥–æ –ø–æ—á–Ω–µ—Ç—å—Å—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ü–µ 0. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// end (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π) ‚Äì —ñ–Ω–¥–µ–∫—Å, –Ω–∞ —è–∫–æ–º—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ü–µ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º

const array13 = [7, 13, 3, 98, 5];
array13.copyWithin(0, 2, 4); // –Ω–µ –≤–∫–ª—é—á–∞—î 4
// console.log(array13); // [3, 98, 3, 98, 5]

const array14 = ["–æ", "c", "—ñ", "–Ω", "—å"];
array14.copyWithin(-2, 1, -3);
// console.log(array14); // ['–æ', 'c', '—ñ', 'c', '—å']

// ==============================================================================
// ? entries()
// - –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä—É —ñ–Ω–¥–µ–∫—Å-–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É

const array15 = ["apple", "banana", "cherry"];

const iterator = array15.entries(); // iterator –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–µ—Ä–¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
// console.log("üöÄ ~ iterator:", iterator);

for (let [index, value] of iterator) {
  //   console.log(index, value);
}
// 0 'apple'
// 1 'banana'
// 2 'cherry'

const array16 = ["apple", "banana", "cherry"];
const entriesArray = Array.from(array16.entries()); // —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
// console.log(entriesArray); // [[0, 'apple'], [1, 'banana'], [2, 'cherry']]

const array17 = ["apple", "banana", "cherry", "mango"];
const iterator1 = array17.entries(); // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä –∑ –¥–æ–ø–æ–º–æ–≥–æ—é entries()

iterator1.forEach(([index, value]) => {
  //   console.log(index, value); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ forEach –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä
});

// ==============================================================================
// ? every()
// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –ø–µ–≤–Ω—É —É–º–æ–≤—É
//  –ø—Ä–∏–π–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback), —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —É–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, –∞–±–æ false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ.
// TODO - array.every(callback(currentValue, index, array), thisArg);

const numbers1 = [12, 34, 55, 23, 19];
const allGreaterThanTen = numbers1.every(num => num > 10);
// console.log(allGreaterThanTen); // true

const numbers2 = [2, 4, 6, 8, 10];
const allEven1 = numbers2.every(num => num % 2 === 0);
// console.log(allEven1); // true

const numbers3 = [2, 4, 5, 8, 10];
const allEven2 = numbers3.every(num => num % 2 === 0);
// console.log(allEven2); // false (—Ç–æ–º—É —â–æ 5 ‚Äî –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ)

const words1 = ["apple", "banana", "cherry"];
const allContainA = words1.every(word => word.includes("a"));
// console.log(allContainA); // false (—É —á–µ—Ä—Ä–∏ –Ω–µ–º–∞–µ –±–∫—É–≤–∏ "a")

// ==============================================================================
// ? fill()
// - –∑–º—ñ–Ω—é—î —ñ—Å–Ω—É—é—á–∏–π –º–∞—Å–∏–≤, –∑–∞–ø–æ–≤–Ω—é—é—á–∏ –π–æ–≥–æ –∑–∞–¥–∞–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º —É –ø–µ–≤–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤.
// - arr.fill(value, start, end)
// value ‚Äì –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–∏–º –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è –º–∞—Å–∏–≤.
// start (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) ‚Äì —ñ–Ω–¥–µ–∫—Å, –∑ —è–∫–æ–≥–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0). –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// end (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) ‚Äì —ñ–Ω–¥–µ–∫—Å, –¥–æ —è–∫–æ–≥–æ —Ç—Ä–∏–≤–∞—î –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è (–ù–ï –≤–∫–ª—é—á–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º arr.length). –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// TODO - –∑—Ä—É—á–Ω–∏–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –ø–µ–≤–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –∞–±–æ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.

const array18 = [7, 2, 10, 4, 5];
array18.fill(0);
// console.log(array18); // [0, 0, 0, 0, 0]
array18.fill(3, 2);
// console.log(array18); // [0, 0, 3, 3, 3]
array18.fill("hello", 3, -1);
// console.log(array18); // [0, 0, 3, 'hello', 3]

const newArr1 = new Array(5).fill(1); //–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –º–∞—Å–∏–≤—É
// console.log(newArr1); // [1, 1, 1, 1, 1]

// ==============================================================================
// ? filter()
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–¥–∞–Ω—ñ–π —É–º–æ–≤—ñ;
// TODO - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è; –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤.
// - const newArray = array.filter(callback(element, index, array));

const numbers4 = [5, 12, 8, 130, 44];
const filteredNumbers = numbers4.filter(num => num > 10);
// console.log(filteredNumbers); // [12, 130, 44]

const numbers5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const evenNumbers = numbers5.filter(num => num % 2 === 0);
// console.log(evenNumbers); // [2, 4, 6, 8, 10]

const words2 = ["apple", "banana", "cherry", "kiwi", "grape"];
const wordsWithA = words2.filter(word => word.includes("a"));
// console.log(wordsWithA); // ["apple", "banana", "grape"]

const users = [
  { name: "Alice", age: 17 },
  { name: "Bob", age: 22 },
  { name: "Charlie", age: 19 },
];

const adults = users.filter(user => user.age >= 18);
// console.log(adults);
// [{ name: "Bob", age: 22 }, { name: "Charlie", age: 19 }]

// ==============================================================================
// ? find()
// - —à—É–∫–∞—î –ø–µ—Ä—à–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ
// - array.find(callback(element, index, array), thisArg);
// - –ø–æ–≤–µ—Ä–Ω–µ undefined —è–∫—à–æ –∂–æ–±–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ

const numbers6 = [1, 2, 3, 4, 5];
const found = numbers6.find(number => number > 3);
// console.log(found); // 4

const fruits = ["apple", "banana", "cherry", "blueberry", "peach"];
const result = fruits.find(fruit => fruit.startsWith("b"));
// console.log(result); // "banana"
const result1 = fruits.find(fruit => fruit.includes("r"));
// console.log("üöÄ ~ result1:", result1);

// ==============================================================================
// ? findIndex()
// - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –≤–∫–∞–∑–∞–Ω—É —É —Ñ—É–Ω–∫—Ü—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback). –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î -1;
// - array.findIndex(callback(currentValue, index, array), thisArg);

const index = fruits.findIndex(fruit => fruit.startsWith("b"));
// console.log("üöÄ ~ index:", index); // 1

// ==============================================================================
// ? findLast()
// - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –≤–∫–∞–∑–∞–Ω—É —É —Ñ—É–Ω–∫—Ü—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback).
// - –ø–æ–≤–µ—Ä—Ç–∞—î undefined —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è–µ —É–º–æ–≤—É;

const lastElement = fruits.findLast(fruit => fruit.startsWith("b"));
// console.log(lastElement); // "blueberry";

// ==============================================================================
// ? findLastIndex()
// - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –≤–∫–∞–∑–∞–Ω—É —É —Ñ—É–Ω–∫—Ü—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback). –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î -1

const lastIndex = fruits.findLastIndex(fruit => fruit.startsWith("b"));
// console.log(lastIndex); // 3

// ==============================================================================
// ? flat()
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∑–º–µ–Ω—à—É—é—á–∏ –≤–∫–ª–∞–¥–µ–Ω—ñ –º–∞—Å–∏–≤–∏ –Ω–∞ –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î –≤–∫–ª–∞–¥–µ–Ω—ñ –º–∞—Å–∏–≤–∏ –Ω–∞ –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥–ª–∏–±–∏–Ω–∏ –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è.
// TODO —è–∫—â–æ –≤–∫–∞–∑–∞—Ç–∏ Infinity –º–µ—Ç–æ–¥ —Ä–æ–∑–≥–æ—Ä–Ω–µ –≤—Å—ñ –≤–∫–ª–∞–¥–µ–Ω—ñ –º–∞—Å–∏–≤–∏ –Ω–∞ –±—É–¥—å-—è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–≤–Ω—ñ–≤.

const array19 = [1, 2, [3, 4], 5, [6, 7]];
const flattened = array19.flat();
// console.log(flattened); // [1, 2, 3, 4, 5, 6, 7]

const array20 = [1, 2, [3, 4, [5, 6]], 7];
const flattened1 = array20.flat(2);
// console.log(flattened1); // [1, 2, 3, 4, 5, 6, 7]

const array21 = [1, 2, [3, [4, [5]]]];
const flattened2 = array21.flat(Infinity);
// console.log(flattened2); // [1, 2, 3, 4, 5]

// ==============================================================================
// ? flatMap()
// - —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, –∞ –ø–æ—Ç—ñ–º –≤–∏—Ä—ñ–≤–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å;
// - —î –ø–æ—î–¥–Ω–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥—ñ–≤ map() —ñ flat(), –¥–µ map() –∑–º—ñ–Ω—é—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É, –∞ flat() –≤–∏—Ä—ñ–≤–Ω—é—î –≤–∫–ª–∞–¥–µ–Ω—ñ –º–∞—Å–∏–≤–∏ –Ω–∞ –æ–¥–∏–Ω —Ä—ñ–≤–µ–Ω—å
// - array.flatMap(callback(currentValue, index, array))

const array22 = [1, 2, 3, 4];
const result2 = array22.flatMap(x => [x, x * 2]);
// console.log(result2); // [1, 2, 2, 4, 3, 6, 4, 8] –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–≤–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: —Å–∞–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —ñ –π–æ–≥–æ –ø–æ–¥–≤–æ—î–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó.

const words3 = ["hello", "world"];

const letters = words3.flatMap(word => word.split(""));

// console.log(letters); // ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'] —Ä–æ–∑–±–∏–≤–∞—î—Ç—å—Å—è –Ω–∞ –æ–∫—Ä–µ–º—ñ –ª—ñ—Ç–µ—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É split().
// flatMap() —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤–∏ –ª—ñ—Ç–µ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –∞ –ø–æ—Ç—ñ–º –∑–ª–∏–≤–∞—î —ó—Ö –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤.

const array23 = [1, 2, 3, 4, 5];
const result3 = array23.flatMap(x => (x % 2 === 0 ? [x] : []));
// console.log(result3); // [2, 4] –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–µ–ø–∞—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞ –º–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, —Ç–æ–º—É –≤–æ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä–∞–ø–ª—è—é—Ç—å —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// ===============================================================================
// ? forEach()
// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö. –í—ñ–Ω —î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ—é —Ü–∏–∫–ª—É for –∞–±–æ for...of, –∞–ª–µ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É, –∞ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ–Ω—É—î –æ–ø–µ—Ä–∞—Ü—ñ—é –Ω–∞–¥ –∫–æ–∂–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º.
// - array.forEach(callback(currentValue, index, array))
// -  –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω—ñ—á–æ–≥–æ (undefined), –≤—ñ–Ω –ª–∏—à–µ –≤–∏–∫–æ–Ω—É—î –∑–∞–¥–∞–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é.

const fruits1 = ["apple", "banana", "cherry"];

fruits1.forEach((fruit, index) => {
  //   console.log(`–§—Ä—É–∫—Ç ‚Ññ${index + 1}: ${fruit}`);
});
// –§—Ä—É–∫—Ç ‚Ññ1: apple
// –§—Ä—É–∫—Ç ‚Ññ2: banana
// –§—Ä—É–∫—Ç ‚Ññ3: cherry

const users1 = [
  { name: "Alice", age: 25 },
  { name: "Bob", age: 30 },
  { name: "Charlie", age: 35 },
];

users1.forEach(user => {
  user.age += 1; // –ó–±—ñ–ª—å—à—É—î–º–æ –≤—ñ–∫ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ 1
});
// console.log(users1);
// [
//   { name: "Alice", age: 26 },
//   { name: "Bob", age: 31 },
//   { name: "Charlie", age: 36 },
// ];

const numbers7 = [10, 20, 30, 40];
let sum = 0;

numbers7.forEach(num => {
  sum += num;
});
// console.log(`–°—É–º–∞ —á–∏—Å–µ–ª: ${sum}`); // –°—É–º–∞ —á–∏—Å–µ–ª: 100
//  –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
// –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ–∑ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ map().
//
// –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ break –∞–±–æ return —É forEach().
// –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ for...of –∞–±–æ some()
// TODO –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π –Ω–∞–¥ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å–∏–≤—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å –∞–±–æ –∑–º—ñ–Ω–∏ –æ–±'—î–∫—Ç—ñ–≤ —É –º–∞—Å–∏–≤—ñ. –ê–ª–µ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ, –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ map().

// ==============================================================================
// ? includes()
// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –∞–±–æ —Ä—è–¥–æ–∫ –ø–µ–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.
// - –í—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ, —ñ false, —è–∫—â–æ –Ω—ñ
// - array.includes(searchElement, fromIndex)

const fruits2 = ["apple", "banana", "cherry"];
// console.log(fruits2.includes("banana")); // true
// console.log(fruits2.includes("grape")); // false

const numbers8 = [1, 2, 3, 4, 5];
// console.log(numbers8.includes(3, 2)); // true (–ø–æ—à—É–∫ –∑ —ñ–Ω–¥–µ–∫—Å—É 2)
// console.log(numbers8.includes(3, 4)); // false (–ø–æ—à—É–∫ –∑ —ñ–Ω–¥–µ–∫—Å—É 4, 3 –≤–∂–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)

const sentence = "JavaScript is a powerful language";
// console.log(sentence.includes("powerful")); // true
// console.log(sentence.includes("Python")); // false

const email = "example@gmail.com";
// console.log(email.includes("@"));  // true
// console.log(email.includes(".com")); // true
// console.log(email.includes("hotmail")); // false
// TODO –ú–µ—Ç–æ–¥ includes() –∑—Ä—É—á–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –ø–µ–≤–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —É –º–∞—Å–∏–≤—ñ –∞–±–æ –ø—ñ–¥—Ä—è–¥–æ–∫ —É —Ä—è–¥–∫—É. –í—ñ–Ω –ø—Ä–∞—Ü—é—î –ø—Ä–æ—Å—Ç—ñ—à–µ, –Ω—ñ–∂ indexOf(), –±–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ !== -1.

// ==============================================================================
// ? indexOf()
// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—à—É–∫—É –ø–µ–≤–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ –∞–±–æ —Ä—è–¥–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞. –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î -1.
// - array.indexOf(searchElement, fromIndex)

const fruits3 = ["apple", "banana", "cherry", "banana"];
// console.log(fruits3.indexOf("banana")); // 1 (–ø–µ—Ä—à–µ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è "banana" –Ω–∞ —ñ–Ω–¥–µ–∫—Å—ñ 1)
// console.log(fruits3.indexOf("grape")); // -1 (–µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)

const numbers9 = [1, 2, 3, 4, 2, 5];

// console.log(numbers9.indexOf(2));    // 1 (–ø–µ—Ä—à–µ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è 2)
// console.log(numbers9.indexOf(2, 2)); // 4 (–ø–æ—á–∏–Ω–∞—î –ø–æ—à—É–∫ –∑ —ñ–Ω–¥–µ–∫—Å—É 2, –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É 2)

const letters1 = ["a", "b", "a", "c", "a", "d"];
let indices = [];
let ind = letters1.indexOf("a");

while (ind !== -1) {
  indices.push(ind);
  ind = letters1.indexOf("a", ind + 1); // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫ –ø—ñ—Å–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
}
// console.log(indices); // [0, 2, 4]

const cars = ["BMW", "Audi", "Tesla"];
const carToRemove = "Audi";
const index1 = cars.indexOf(carToRemove);

if (index1 !== -1) {
  cars.splice(index1, 1); // –í–∏–¥–∞–ª—è—î "Audi" –∑ –º–∞—Å–∏–≤—É
}
// console.log(cars); // ["BMW", "Tesla"]
// TODO –ú–µ—Ç–æ–¥ indexOf() –∫–æ—Ä–∏—Å–Ω–∏–π, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ –∞–±–æ —Ä—è–¥–∫—É. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å, –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ includes(), –±–æ –≤—ñ–Ω –±—ñ–ª—å—à —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π.

// ==============================================================================
// ? join()
// -
