// ==============================================================================
// ? at()
// - –ø–æ–≤–µ—Ä—Ç–∞—î –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º;
// - –ø—Ä–∏–π–º–∞—î –≤—ñ–¥'—î–º–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è;
// - –ø–æ–≤–µ—Ä—Ç–∞—î indefined, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ —Ç–∞–∫–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º –≤—ñ–¥—Å—É—Ç–Ω—î.

const stores = ["–†—É–∫–∞–≤–∏—á–∫–∞", "–ë–ª–∏–∑–µ–Ω—å–∫–æ", "–ê–¢–ë", "–§–æ–∫—Å—Ç—Ä–æ—Ç", "–ú–æ–±—ñ–ú–∞–Ω—ñ—è"];
// console.log('üöÄ ~ stores:', stores);

const store1 = stores.at(1);
// console.log('üöÄ ~ store1:', store1);
// console.log(stores[1]); // —Ç–∞–∫–æ–∂ —à—É–∫–∞—î –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º

const store2 = stores.at(-1); // –¥–ª—è –ø–æ—à—É–∫—É –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É
// console.log('üöÄ ~ store2:', store2);
// console.log(stores[-1]); // !–Ω–µ –ø–∏–π–º–∞—î –≤—ñ–¥—î–º–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–∏—Ç–∞—î undefined.

// console.log(stores.at(-1) === stores[stores.length - 1]); // TODO –º–æ–∂–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —â–æ–± —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Å.

// ==============================================================================
// ? concat()
// - –æ–±'—î–¥–Ω—É—î –¥–≤–∞ –∞–±–æ –±–∏–ª—å—à–µ –º–∞—Å–∏–≤—ñ–≤;
// - –Ω–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤;
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤;

const array1 = [1, 2, 3];
// console.log('üöÄ ~ array1:', array1);

const array2 = [4, 5, 6];
// console.log('üöÄ ~ array2:', array2);

const newArray1 = array1.concat(array2);
// console.log('üöÄ ~ newArray1:', newArray1);

const array3 = [7, 8, 9];
// console.log('üöÄ ~ array3:', array3);

const newArray2 = array1.concat(array2, array3); // —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Å–∏–≤—ñ–≤;
// console.log('üöÄ ~ newArray2:', newArray2);

// ==============================================================================
// ? Array()  //constructor
// - —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤;
const array4 = Array(1, 2, 3, "—Ü—É–∫–æ—Ä", true);
// console.log("üöÄ ~ array:", array4); // [1, 2, 3, '—Ü—É–∫–æ—Ä', true]

const str1 = "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?";
const str2 = "–î–æ–±—Ä–µ!";
const array5 = Array(str1, str2);
// console.log("üöÄ ~ array5:", array5); // ['–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?', '–î–æ–±—Ä–µ!']

// ==============================================================================
// ? Array.from()  //constructor
// - —Å—Ç–≤–æ—Ä—é—î –º–∞—Å—Å–∏–≤ (–∑ —ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
// TODO –Ü—Ç–µ—Ä–∞–±–µ–ª—å–Ω—ñ –æ–±'—î–∫—Ç–∏ ‚Äî —Ü–µ –æ–±'—î–∫—Ç–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ (—ñ—Ç–µ—Ä–∞—Ü—ñ—é) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é for...of –∞–±–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—Ç–∏ ...spread.

const str3 = "–°—É–ø–µ—Ä!";
const array6 = Array.from(str3);
// console.log("üöÄ ~ array6:", array6); // ['–°', '—É', '–ø', '–µ', '—Ä', '!']
const sentence1 = "–°—å–æ–≥–æ–¥–Ω—ñ –≥–∞—Ä–Ω–∞ –ø–æ–≥–æ–¥–∞";
const array7 = Array.from(sentence1);
// console.log("üöÄ ~ array7:", array7); // ['–°', '—å', '–æ', '–≥', '–æ', '–¥', '–Ω', '—ñ', ' ', '–≥', '–∞', '—Ä', '–Ω', '–∞', ' ', '–ø', '–æ', '–≥', '–æ', '–¥', '–∞']

const num1 = 7689;
// console.log("üöÄ ~ num1:", typeof num1); // number
const array8 = Array.from(num1);
// console.log("üöÄ ~ array8:", array8); // –ø–æ–≤–µ—Ä—Ç–∞—î –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤ (–ß–∏—Å–ª–∞ –Ω–µ –º–∞—é—Ç—å –º–µ—Ç–æ–¥—É Symbol.iterator)
const array9 = Array.from(String(num1), Number); // —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —É —Ä—è–¥–∫–∏ –∞ —Ä—è–¥–∫–∏ –≤ —á–∏—Å–ª–∞ (–¥—Ä—É–≥–∏–π –∞–≥—Ä—É–º–µ–Ω—Ç –∫–∞–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è Number())
// console.log(array9); //[7, 6, 8, 9]

function example() {
  const array10 = Array.from(arguments); //  –º–∞—Å–∏–≤–æ–ø–æ–¥—ñ–±–Ω—ñ –æ–±'—î–∫—Ç–∏ (arguments)
  //   console.log(array10);
}
example(1, 2, 3); // [1, 2, 3]
example("–æ–¥–∏–Ω", "–¥–≤–∞"); // ["–æ–¥–∏–Ω", "–¥–≤–∞"];
// const num = 98765;
// const array10 = Array.from(String(num)).map(Number);

// console.log(array10); // –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ map()

const paragraphs = document.querySelectorAll("p");
const array11 = Array.from(paragraphs).map(p => p.textContent);
// console.log(array11); // ['–ü—Ä–∏–≤—ñ—Ç!', '–Ø–∫ —Å–ø—Ä–∞–≤–∏?', '–î–æ–±—Ä–µ!']

// const paragraphs = document.querySelectorAll("p");
// const array11 = Array.from(paragraphs, p => p.textContent);// —Å–∫–æ—Ä–æ—á–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º

// console.log(array11);

//!
// const mySet = new Set([1, 2, 3, 3, 4]);
// const arrayFromSet = Array.from(mySet);
// console.log(arrayFromSet); // [1, 2, 3, 4] (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–∏–±—Ä–∞–Ω—ñ)
//!
// const myMap = new Map([
//   ["a", 1],
//   ["b", 2],
// ]);
// const keys = Array.from(myMap.keys());
// console.log(keys); // ['a', 'b']
//!
// const numbers = Array.from([1, 2, 3], x => x * 2);
// console.log(numbers);// [2, 4, 6]
// ! —Ç–∞–∫ —Ç–µ–∂ –º–æ–∂–Ω–æ –∞–ª–µ —Ü–µ –∑–∞–π–≤–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ split(" ") –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º
//  const sentence = "This is a simple sentence";
// const wordsArray = Array.from(sentence.split(" "));
// console.log(wordsArray);
// TODO —Å–ø–æ—Å—ñ–± —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –æ–±—î–∫—Ç –∏—Ç–µ—Ä–∞–±—ñ–ª—å–Ω–∏–º
// const person = {
//   name: "Alice",
//   age: 25,
//   city: "New York",

//   [Symbol.iterator]() {
//     const entries = Object.entries(this);
//     let index = 0;

//     return {
//       next() {
//         if (index < entries.length) {
//           return { value: entries[index++], done: false };
//         } else {
//           return { done: true };
//         }
//       },
//     };
//   },
// };

// for (const [key, value] of person) {
//   console.log(key, value); // name Alice // age 25 // city New York
// }

// ==============================================================================
// ? Array.fromAsync() //constructor
// -  –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
// TODO –ì–Ω—É—á–∫—ñ—Å—Ç—å: –ü—ñ–¥—Ç—Ä–∏–º—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∞–±–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤, —â–æ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–∏—Ö, –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑ –º–µ—Ä–µ–∂—ñ –∞–±–æ –∑ —ñ–Ω—à–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.
//!
// const asyncIterable = {
//   async *[Symbol.asyncIterator]() {
//     yield 1;
//     yield 2;
//     yield 3;
//   }
// };
// Array.fromAsync(asyncIterable).then(arr => console.log(arr));  // [1, 2, 3]
//!
// async function* asyncGenerator() {
//   yield "apple";
//   yield "banana";
//   yield "cherry";
// }

// (async () => {
//   const fruits = await Array.fromAsync(asyncGenerator());
//   console.log(fruits); // ["apple", "banana", "cherry"]
// })();
//!
// async function fetchData(url) {
//   const response = await fetch(url);
//   return await response.json();
// }

// (async () => {
//   const urls = [
//     "https://jsonplaceholder.typicode.com/posts/1",
//     "https://jsonplaceholder.typicode.com/posts/2",
//   ];

//   const posts = await Array.fromAsync(urls, async url => {
//     const post = await fetchData(url);
//     return post.title; // –í–∏–±—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∑ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç—É
//   });

//   console.log(posts); // ["Title 1", "Title 2"]
// })();

// ==============================================================================
// ? Array.isArray() //constructor
// - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–µ—Ä–µ–¥–∞–Ω–∏–π –æ–±'—î–∫—Ç –º–∞—Å–∏–≤–æ–º.
// - –ø–æ–≤–µ—Ä—Ç–∞—î true –∞–±–æ false

// console.log(Array.isArray(array4)); // true
// console.log(Array.isArray(sentence1)); // false

// ==============================================================================
// ? Array.of() //constructor
// - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;
const array12 = Array.of(1, 2, 3);
// console.log("üöÄ ~ array12:", array12); // [1, 2, 3]

// ==============================================================================
// ? copyWithin()
// - –æ–∑–≤–æ–ª—è—î –∫–æ–ø—ñ—é–≤–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–∞—Å–∏–≤—É –≤ —ñ–Ω—à—É —á–∞—Å—Ç–∏–Ω—É —Ü—å–æ–≥–æ –∂ –º–∞—Å–∏–≤—É;
// - –Ω–µ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å—Å–∏–≤, –∑–¥–∏–π—Å–Ω—é—î –ø–µ—Ä–Ω–µ—Å–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º–∞—Å—Å–∏–≤—ñ;
// TODO - array.copyWithin(target, start, end)
// target ‚Äì —ñ–Ω–¥–µ–∫—Å, –≤ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏. –Ø–∫—â–æ target —î –≤—ñ–¥'—î–º–Ω–∏–º, –≤—ñ–Ω –≤–∫–∞–∑—É—î –Ω–∞ —ñ–Ω–¥–µ–∫—Å –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// start (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π) ‚Äì —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞, –∑ —è–∫–æ–≥–æ –ø–æ—á–Ω–µ—Ç—å—Å—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ü–µ 0. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// end (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π) ‚Äì —ñ–Ω–¥–µ–∫—Å, –Ω–∞ —è–∫–æ–º—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ü–µ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É. –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º

const array13 = [7, 13, 3, 98, 5];
array13.copyWithin(0, 2, 4); // –Ω–µ –≤–∫–ª—é—á–∞—î 4
// console.log(array13); // [3, 98, 3, 98, 5]

const array14 = ["–æ", "c", "—ñ", "–Ω", "—å"];
array14.copyWithin(-2, 1, -3);
// console.log(array14); // ['–æ', 'c', '—ñ', 'c', '—å']

// ==============================================================================
// ? entries()
// - –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä—É —ñ–Ω–¥–µ–∫—Å-–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É

const array15 = ["apple", "banana", "cherry"];

const iterator = array15.entries(); // iterator –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–µ—Ä–¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
// console.log("üöÄ ~ iterator:", iterator);

for (let [index, value] of iterator) {
  console.log(index, value);
}
// 0 'apple'
// 1 'banana'
// 2 'cherry'

const array16 = ["apple", "banana", "cherry"];
const entriesArray = Array.from(array16.entries()); // —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤
// console.log(entriesArray); // [[0, 'apple'], [1, 'banana'], [2, 'cherry']]

const array17 = ["apple", "banana", "cherry", "mango"];
const iterator1 = array17.entries(); // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä –∑ –¥–æ–ø–æ–º–æ–≥–æ—é entries()

iterator1.forEach(([index, value]) => {
  console.log(index, value); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ forEach –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä
});

// ==============================================================================
// ? every()
// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –ø–µ–≤–Ω—É —É–º–æ–≤—É
//  –ø—Ä–∏–π–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback), —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —É–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, –∞–±–æ false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ.
// TODO - array.every(callback(currentValue, index, array), thisArg);

const numbers1 = [12, 34, 55, 23, 19];
const allGreaterThanTen = numbers1.every(num => num > 10);
// console.log(allGreaterThanTen); // true

const numbers2 = [2, 4, 6, 8, 10];
const allEven1 = numbers2.every(num => num % 2 === 0);
// console.log(allEven1); // true

const numbers3 = [2, 4, 5, 8, 10];
const allEven2 = numbers3.every(num => num % 2 === 0);
console.log(allEven2); // false (—Ç–æ–º—É —â–æ 5 ‚Äî –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ)

const words1 = ["apple", "banana", "cherry"];
const allContainA = words1.every(word => word.includes("a"));
console.log(allContainA); // false (—É —á–µ—Ä—Ä–∏ –Ω–µ–º–∞–µ –±–∫—É–≤–∏ "a")

// ==============================================================================
// ? fill()
// - –∑–º—ñ–Ω—é—î —ñ—Å–Ω—É—é—á–∏–π –º–∞—Å–∏–≤, –∑–∞–ø–æ–≤–Ω—é—é—á–∏ –π–æ–≥–æ –∑–∞–¥–∞–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º —É –ø–µ–≤–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤.
// - arr.fill(value, start, end)
// value ‚Äì –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–∏–º –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è –º–∞—Å–∏–≤.
// start (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) ‚Äì —ñ–Ω–¥–µ–∫—Å, –∑ —è–∫–æ–≥–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0). –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
// end (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) ‚Äì —ñ–Ω–¥–µ–∫—Å, –¥–æ —è–∫–æ–≥–æ —Ç—Ä–∏–≤–∞—î –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è (–ù–ï –≤–∫–ª—é—á–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º arr.length). –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—î–º–Ω–∏–º
